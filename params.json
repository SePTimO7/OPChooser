{"name":"OPChooser","tagline":"Terminal finance app that helps user make a better decision about options trading.","body":"## About\r\n\r\nOPChooser is a tool to help you to make options trading decision. That is, it analyzes all of options retrieved by the given ticker symbol and then give you a set of options which has the max payoff.(Note: with the demo version(iborder branch), you could place an order after getting the result.) OPChooser is also a final project for Stevens Institute of Technology - FE545 Design Patterns and Derivatives Pricing. The Motivations for this project is to learn and practice Object Oriented Design Patterns. \r\n\r\n## Page\r\n[http://enthalpy-yan.github.io/OPChooser](http://enthalpy-yan.github.io/OPChooser)\r\n\r\n## Branch\r\n\r\n- master \r\n- iborder (support placing order) *demo version*\r\n\r\n## Patterns\r\n\r\n- Singleton Pattern\r\n- Factory Pattern\r\n- Iterator Pattern\r\n- Template Pattern\r\n- Strategy Pattern\r\n\r\n## Dependencies\r\n- [libcurl](http://curl.haxx.se/libcurl/)    (handling http request and response)\r\n- [jsoncpp](http://jsoncpp.sourceforge.net/) (parsing json format)\r\n- [boost](http://www.boost.org)              (useful libraries)\r\n- [rudimeier's twsapi](https://github.com/rudimeier/twsapi) (used for placeing order in branch iborder)\r\n\r\n## Overall Directory Structure\r\n\r\nAt a high level, the structure looks roughly like this:\r\n\r\n```\r\nFE545-FinalProject/\r\n  |- include/\r\n  |  |- IOptionCollection.h           (Interface for Option Collection) \r\n  |  |- IOptionIterator.h             (Interface for Option Iterator)\r\n  |  |- MyAppHelper.h                 (Header file for Helper class)\r\n  |  |- Option.h                      (Header file for Option model class) \r\n  |  |- OptionCollection.h            (Header file for concreate Option Collection class)\r\n  |  |- OptionFactory.h               (Header file for Option Factory)\r\n  |  |- OptionIterator.h              (Header file for concreate Option Interator class) \r\n  |  |- Restclient.h                  (Header file for RestClient class)\r\n  |  |- Logger.h                      (Header file for Logger class)\r\n  |  |- OptionFilter.h\t              (Header file for options filter class)\r\n  |  |- TemplateOne.h\t              (Header file for Template Method class)\r\n  |  |- Strategy.h                    (Header file for Strategy class)\r\n  |  |- EPosixClientSocket.h          (Branch iborder)\r\n  |  |- EPosixClientSocketPlatform.h  (Branch iborder)\r\n  |  |- PosixTestClient.h             (Branch iborder)\r\n  |- source/\r\n  |  |- Main.cpp                      (Main function)\r\n  |  |- MyAppHelper.cpp               (Implementation for Helper class)\r\n  |  |- Option.cpp                    (Implementation for Option class)\r\n  |  |- OptionCollection.cpp          (Implementation for concreate Option Collection class)\r\n  |  |- OptionFactory.cpp             (Implementation for Option Factory class)\r\n  |  |- OptionIterator.cpp            (Implementation for concreate Option Iterator class)\r\n  |  |- Restclient.cpp                (Implementation for RestClient class)\r\n  |  |- Logger.cpp                    (Implementation for Logger class)\r\n  |  |- OptionFilter.cpp              (Implementation for options filter class)\r\n  |  |- TemplateOne.cpp\t              (Implementation for Template Method class)\r\n  |  |- Strategy.cpp\t              (Implementation for Strategy class)\r\n  |  |- EClientSocketBase.cpp         (Branch iborder)\r\n  |  |- PosixTestClient.cpp           (Branch iborder)\r\n  |  |- EPosixClientSocket.cpp        (Branch iborder)\r\n  |- shared/\r\n  |- Makefile                         (Makefile for building this application)\r\n  |- README.md                        (Readme file for github)\r\n```\r\n\r\n## Option Model\r\n\r\n```\r\nenum OptionType { CALL, PUT };\r\nclass Option {\r\n\tstring stockName;\r\n\tstring optionSymbol;\r\n\tdouble strikePrice;\r\n\tdouble purchasePrice;\r\n\tdouble optionPrice;\t// ask\r\n\tOptionType optionType;\r\n\tboost::gregorian::date purchaseDate;\r\n\tboost::gregorian::date expirationDate;\r\n}\r\n```\r\n\r\n## Data Service API Reference\r\n\r\n### OptionCollection\r\n\r\n##### This is a container class used to saving option informations. Basically, it is a std::vector\\<Option\\>.\r\n\r\n- getIterator()\r\n    \r\n   Returns a iterator for the collection.\r\n   ```\r\n\tOptionCollection optionList = GET_OPTIONS(\"GOOG\", \"2013-12\", CALL);\t\r\n\r\n\tIOptionIterator *iter = optionList.getIterator();\r\n\r\n  \tfor ( Option p = iter->firstOption(); iter->isDone() == false; p = iter->nextOption() ) {\r\n\t\tstd::cout << p << std::endl;\r\n  \t}\r\n   ```\r\n\r\n### Helper Class\r\n\r\n##### This is a wrapper class for the functions used to get stock/option related informations.\r\n\r\n- GET_STOCK_PRICE(stock_name)\r\n    \r\n    Returns the price of stock given in stock_name.\r\n    ```\r\n\tdouble price = GET_STOCK_PRICE(\"GOOG\")\t => get the price of GOOG.\r\n    ```\r\n\r\n- GET_OPTIONS(stock_name, expiration_date, option_type)\r\n\r\n    Returns the options list with the given arguments.\r\n    ```\r\n\tOptionCollection optionList = GET_OPTIONS(\"GOOG\", \"2013-12\", CALL) => get all of GOOG's option(Type: call, expiration date: before 2013-12).\r\n    ```\r\n\r\n- SEND_HTTP_REQUEST(request_url)\r\n    \r\n    Returns the response(string) of url given in request_url. Only HTTP GET method.\r\n    ```\r\n\tSEND_HTTP_REQUEST(\"http://www.example.org\")\r\n    ```\r\n\r\n\r\n### Logger Class\r\n\r\n##### This is a logger class for logging informations.\r\n\r\n- LOGGER_CONF(logfile_name, configuraitons, fileVerbosityLevel, screenVerbosityLevel)\r\n\r\n    Configures the logger.\r\n    ```\r\n\tLOGGER_CONF(\"outputfile\", Logger::file_on|Logger::screen_on, DEBUG_FLAG, ERROR_FLAG) => log debug info in logfile and error info on screen.\r\n\tLOGGER_CONF(\"\", Logger::screen_on, DEBUG_FLAG, DEBUG_FLAG) => log debug info on screen.\r\n    ```\r\n- LOGGER(log_flag, log_messages)\r\n\r\n    Prints log messages.\r\n    ```\r\n\tLOGGER(DEBUG_FLAG, \"hello \" << \"world\"); => log message \"hello world\".\r\n    ```\r\n\r\n## Build and Run\r\nUnder the root directory\r\n```\r\n$ git checkout iborder (switch to branch iborder in order to support place order)\r\n$ make\r\n$ ./OPChooser -h\r\nAllowed options:\r\n  -h [ --help ]         Print help messages.\r\n  -v [ --verbose ]      Print words with verbosity.\r\n  -o [ --output ] arg   Set logging output file.\r\n  -t [ --ticker ] arg   Set the name of ticker.\r\n  -d [ --date ] arg     Set expiration date for the given ticker.\r\n  -order                place order when finished calculation using Interative Broker Socker Client(Branch iborder).\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}